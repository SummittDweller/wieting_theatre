{#
/**
 * @file
 * Default theme implementation for a single field in a view.
 *
 * Available variables:
 * - view: The view that the field belongs to.
 * - field: The field handler that can process the input.
 * - row: The raw result of the database query that generated this field.
 * - output: The processed output that will normally be used.
 *
 * When fetching output from the row this construct should be used:
 * data = row[field.field_alias]
 *
 * The above will guarantee that you'll always get the correct data, regardless
 * of any changes in the aliasing that might happen if the view is modified.
 *
 * @see template_preprocess_views_view_field()
 *
 * @ingroup themeable
 * <pre>This is views-view-field.html.twig!</pre>
*/

{# kint(_context|keys) #}
{# dump(user_names) #}
{# dump(output) #}

{% set out_string = output.__toString( ) %}
{# dump(out_string) #}

{% set found = 0 %}
{% set count = 0 %}
{% if user_names is defined %}
  {% set count = user_names|length %}
  {#  dump(count) #}
  {% for name in user_names %}
    {% if name in out_string %}
      {% set found = found + 1 %}
    {% endif %}
  {% endfor %}
{% endif %}

{% if '(2D)' in out_string %}
    <span class="views-field-twoD">{{ output -}}</span>
{% elseif '(3D)' in out_string %}
    <span class="views-field-threeD">{{ output -}}</span>
{% elseif 'PM' in out_string %}
    <span class="views-field-PM">{{ output -}}</span>
{% elseif 'AM' in out_string %}
    <span class="views-field-AM">{{ output -}}</span>
{% elseif 'HELP NEEDED' in out_string %}
    <span class="views-field-help-needed">{{ output -}}</span>
{% elseif (user_names is defined) and (found == count) %}
    <span class="views-field-current-user">{{ output -}}</span>
{% else %}
    <span class="views-field">{{ output -}}</span>
{% endif %}
